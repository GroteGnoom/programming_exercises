extern crate winapi;
extern crate user32;
extern crate kernel32;
extern crate gdi32;
extern crate libc;
use std::ptr;

#[allow(non_snake_case)]
unsafe extern "system" fn MainWindowCallback(Window: winapi::HWND, Message: winapi::UINT, WParam: winapi::WPARAM, LParam: winapi::LPARAM) -> i64
{
    let mut result = 0;

    match Message {
        winapi::WM_SIZE => println!("WM_SIZE"),//kernel32::OutputDebugStringA("WM_SIZE"),
        winapi::WM_DESTROY => println!("WM_DESTROY"),
        winapi::WM_CLOSE => println!("WM_CLOSE"),
        winapi::WM_ACTIVATEAPP => println!("WM_ACTIVATEAPP"),
        winapi::WM_PAINT => {
            //let mut Paint: winapi::PAINTSTRUCT;
           let mut Paint = winapi::PAINTSTRUCT { //initialisation mandatory by rust
                hdc: ptr::null_mut(),
                fErase: 0 as libc::BOOL,
                rcPaint: winapi::RECT {
                    left: 0 as libc::LONG,
                    top: 0 as libc::LONG,
                    right: 0 as libc::LONG,
                    bottom: 0 as libc::LONG
                },
                fRestore: 0 as libc::BOOL,
                fIncUpdate: 0 as libc::BOOL,
                rgbReserved: [0 as libc::BYTE; 32],
            };
            Paint.rcPaint.left = 0;
            let DeviceContext = unsafe { user32::BeginPaint(Window, &mut Paint) };
            println! ("jaja: {:?}", Paint);
            let X = Paint.rcPaint.left;
            let Y = Paint.rcPaint.top;
            let Height = Paint.rcPaint.bottom -Paint.rcPaint.top;
            let Width = Paint.rcPaint.right -Paint.rcPaint.left;
            gdi32::PatBlt(DeviceContext, X,Y,Width,Height, 0);

        },
        _ => {println!("default");
            result = user32::DefWindowProcW(Window, Message, WParam, LParam)
        }
    }
    result
}

unsafe fn WinMain(Instance: winapi::HINSTANCE, PrevInstance: winapi::HINSTANCE, CommandLine: winapi::LPSTR, ShowCode: libc::LONG)
{
    let mut WindowClass = winapi::WNDCLASSW
    {
        style: 0 as winapi::UINT,
        lpfnWndProc: Some(MainWindowCallback), 
        cbClsExtra: 0 as i32,
        cbWndExtra: 0 as i32,
        hInstance: Instance,
        hIcon: 0 as winapi::HICON,
        hCursor: 0 as winapi::HCURSOR,
        hbrBackground: 0 as winapi::HBRUSH,
        lpszMenuName: "MenuName".as_ptr() as *const u16,
        lpszClassName: "HandmadeHeroWindowClass".as_ptr() as *const u16,
    };
    if (user32::RegisterClassW(& WindowClass)!= 0 as u16) //RegisterClassA?
    {
        let WindowHandle: winapi::HWND = user32::CreateWindowExW(
            0,
            WindowClass.lpszClassName,
            "Handmade Hero".as_ptr() as *const u16,
            winapi::WS_OVERLAPPEDWINDOW| winapi::WS_VISIBLE,
            winapi::CW_USEDEFAULT,
            winapi::CW_USEDEFAULT,
            winapi::CW_USEDEFAULT,
            winapi::CW_USEDEFAULT,
            ptr::null_mut(),
            ptr::null_mut(),
            Instance,
            ptr::null_mut()                    
        );
        loop 
        {
        let mut Message: *mut winapi::MSG = ptr::null_mut();
        let MessageResult: libc::BOOL;
        user32::GetMessageW(Message, ptr::null_mut(), 0, 0);
        user32::TranslateMessage(Message);
        user32::DispatchMessage(Message);
        break;
        }
    }


}

fn func() 
{
    let a=ptr::null_mut();
    let b= "hello world".as_ptr() as *const i8;
    let c= "hello".as_ptr() as *const i8;
    let d: u32 = 0;
    unsafe 
    {
        user32::MessageBoxA(a,b,c,d);
    }
}

fn main () 
{
    let Instance: winapi::HINSTANCE = ptr::null_mut();
    let PrevInstance: winapi::HINSTANCE = ptr::null_mut();
    let CommandLine: winapi::LPSTR =ptr::null_mut();
    let ShowCode: libc::LONG =0;
    unsafe
    {
        WinMain(Instance, PrevInstance, CommandLine, ShowCode )}
    }
